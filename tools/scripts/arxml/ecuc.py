import os
import xml.etree.ElementTree as ET
from datetime import datetime

import scripts.System_Generator as sg


# Globals
EcuName = None


def finalize_arxml_doc(file):
   with open(file, "r") as f:
      contents = f.readlines()
   comment = "<!-- Generated by OSEK Builder tool of FreeOSEK project on " + str(datetime.now()) + " -->\n"
   contents.insert(1, comment)
   with open(file, "w") as f:
      contents = "".join(contents)
      f.write(contents)



def insert_container(root, name, dref):
   ctnr = ET.SubElement(root, "ECUC-CONTAINER-VALUE")
   shortname = ET.SubElement(ctnr, "SHORT-NAME")
   shortname.text = name
   def_ref = ET.SubElement(ctnr, "DEFINITION-REF", DEST="ECUC-PARAM-CONF-CONTAINER-DEF")
   def_ref.text = dref
   return ctnr



def insert_reference(root, dref, vref):
   rctnr = ET.SubElement(root, "ECUC-REFERENCE-VALUE")
   def_ref = ET.SubElement(rctnr, "DEFINITION-REF", DEST="ECUC-REFERENCE-DEF")
   def_ref.text = dref
   val_ref = ET.SubElement(rctnr, "VALUE-REF", DEST="ECUC-CONTAINER-VALUE")
   val_ref.text = vref
   return rctnr



def export_appmodes_to_container(root):
   ci = len(list(root))
   for appmode in sg.AppModes:
      root.insert(ci, ET.Comment("OsAppMode"))
      am_ctnr = insert_container(root, appmode, "/AUTOSAR/EcucDefs/Os/OsAppMode")
      ci += 2 # because we inserted 2 elements under root



def insert_osos_param(root, refname, type, subtype, value):
   if type == "text":
      param_blk = ET.SubElement(root, "ECUC-TEXTUAL-PARAM-VALUE")
   else:
      param_blk = ET.SubElement(root, "ECUC-NUMERICAL-PARAM-VALUE")

   if subtype == "bool":
      def_ref = ET.SubElement(param_blk, "DEFINITION-REF", DEST="ECUC-BOOLEAN-PARAM-DEF")
   elif subtype == "int":
      def_ref = ET.SubElement(param_blk, "DEFINITION-REF", DEST="ECUC-INTEGER-PARAM-DEF")
   else:
      def_ref = ET.SubElement(param_blk, "DEFINITION-REF", DEST="ECUC-ENUMERATION-PARAM-DEF")
   def_ref.text = refname

   def_ref = ET.SubElement(param_blk, "VALUE")
   def_ref.text = value



def insert_osos_to_subcontainer(root):
   # OsOs Sub-Containers
   osos_subctnr = ET.SubElement(root, "SUB-CONTAINERS")

   # OS Hooks
   oshooks_ctnr = insert_container(osos_subctnr, "OsHooks", "/AUTOSAR/EcucDefs/Os/OsOS/OsHooks")
   # Parameters
   params = ET.SubElement(oshooks_ctnr, "PARAMETER-VALUES")
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/OsHooks/OsErrorHook"
   insert_osos_param(params, refname, "numer", "bool", sg.OS_Cfgs["ERRORHOOK"])
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/OsHooks/OsPostTaskHook"
   insert_osos_param(params, refname, "numer", "bool", sg.OS_Cfgs["POSTTASKHOOK"])
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/OsHooks/OsPreTaskHook"
   insert_osos_param(params, refname, "numer", "bool", sg.OS_Cfgs["PRETASKHOOK"])
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/OsHooks/OsShutdownHook"
   insert_osos_param(params, refname, "numer", "bool", sg.OS_Cfgs["SHUTDOWNHOOK"])
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/OsHooks/OsStartupHook"
   insert_osos_param(params, refname, "numer", "bool", sg.OS_Cfgs["STARTUPHOOK"])
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/OsHooks/OsProtectionHook"
   insert_osos_param(params, refname, "numer", "bool", "NOT YET SUPPORTED") # Todo: Please fix this.

   # OsHookStack
   oshooksstack_ctnr = insert_container(osos_subctnr, "OsHookStack", "/AUTOSAR/EcucDefs/Os/OsOS/OsHookStack")
   # Parameters
   params = ET.SubElement(oshooksstack_ctnr, "PARAMETER-VALUES")
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/OsHookStack/OsHookStackSize"
   insert_osos_param(params, refname, "numer", "int", sg.OS_Cfgs["OS_STACK_SIZE"])

   # FreeOsekParams
   freeosek_ctnr = insert_container(osos_subctnr, "FreeOsekParams", "/AUTOSAR/EcucDefs/Os/OsOS/FreeOsekParams")
   # Parameters
   params = ET.SubElement(freeosek_ctnr, "PARAMETER-VALUES")
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/FreeOsekParams/OsName"
   insert_osos_param(params, refname, "text", "text", sg.OS_Cfgs["OS"])
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/FreeOsekParams/CpuName"
   insert_osos_param(params, refname, "text", "text", sg.OS_Cfgs["CPU"])
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/FreeOsekParams/IrqStackSize"
   insert_osos_param(params, refname, "numer", "int", sg.OS_Cfgs["IRQ_STACK_SIZE"])
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/FreeOsekParams/ContextSaveSize"
   insert_osos_param(params, refname, "numer", "int", sg.OS_Cfgs["OS_CTX_SAVE_SZ"])
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/FreeOsekParams/AppTasksSize"
   insert_osos_param(params, refname, "numer", "int", sg.OS_Cfgs["TASK_STACK_SIZE"])



def export_osos_to_container(root):
   ci = len(list(root))
   root.insert(ci, ET.Comment("OsOs"))
   osos_ctnr = insert_container(root, "OsOs", "/AUTOSAR/EcucDefs/Os/OsOs")
   # Parameters
   params = ET.SubElement(osos_ctnr, "PARAMETER-VALUES")
   refname = "/AUTOSAR/EcucDefs/Os/OsOS/OsStatus"
   insert_osos_param(params, refname, "text", "enum", sg.OS_Cfgs["STATUS"])
   insert_osos_to_subcontainer(osos_ctnr)



def export_events_to_container(root):
   Events = []
   for task in sg.Tasks:
      if "EVENT" in task:
         for evt in task["EVENT"]:
            if evt not in Events:
               Events.append(evt)
   ci = len(list(root))
   for evt in Events:
      root.insert(ci, ET.Comment("OsEvent"))
      insert_container(root, evt, "/AUTOSAR/EcucDefs/Os/OsEvent")
      ci += 2



def export_counters_to_container(root):
   ci = len(list(root))
   for cntr in sg.Counters:
      root.insert(ci, ET.Comment("OsCounter"))
      ctnr = insert_container(root, cntr["Counter Name"], "/AUTOSAR/EcucDefs/Os/OsCounter")
      ci += 2
      # Parameters
      params = ET.SubElement(ctnr, "PARAMETER-VALUES")
      refname = "/AUTOSAR/EcucDefs/Os/OsCounter/OsCounterMaxAllowedValue"
      insert_osos_param(params, refname, "numer", "int", cntr['MAXALLOWEDVALUE'])
      refname = "/AUTOSAR/EcucDefs/Os/OsCounter/OsCounterMinCycle"
      insert_osos_param(params, refname, "numer", "int", cntr['MINCYCLE'])
      refname = "/AUTOSAR/EcucDefs/Os/OsCounter/OsCounterTicksPerBase"
      insert_osos_param(params, refname, "numer", "int", cntr['TICKSPERBASE'])
      refname = "/AUTOSAR/EcucDefs/Os/OsCounter/OsCounterType"
      insert_osos_param(params, refname, "text", "enum", cntr['OsCounterType'])



def insert_task_reference(root, task, os_obj, dref):
   if os_obj in task:
      for obj in task[os_obj]:
         insert_reference(root, dref, obj)



def export_tasks_to_container(root):
   global EcuName

   ci = len(list(root))
   for task in sg.Tasks:
      root.insert(ci, ET.Comment("OsTask"))
      ctnr = insert_container(root, task["Task Name"], "/AUTOSAR/EcuDefs/Os/OsTask")
      ci += 2
      # Parameters
      params = ET.SubElement(ctnr, "PARAMETER-VALUES")
      refname = "/AUTOSAR/EcucDefs/Os/OsTask/OsTaskActivation"
      insert_osos_param(params, refname, "numer", "int", task['ACTIVATION'])
      refname = "/AUTOSAR/EcucDefs/Os/OsTask/OsTaskPriority"
      insert_osos_param(params, refname, "numer", "int", task['PRIORITY'])
      refname = "/AUTOSAR/EcucDefs/Os/OsTask/OsTaskStackSize"
      insert_osos_param(params, refname, "numer", "int", task['STACK_SIZE'])
      refname = "/AUTOSAR/EcucDefs/Os/OsTask/OsTaskSchedule"
      insert_osos_param(params, refname, "numer", "int", task['SCHEDULE'])

      # References
      references = ET.SubElement(ctnr, "REFERENCE-VALUES")
      # Event References
      dref = "/AUTOSAR/EcucDefs/Os/OsTask/OsTaskEventRef"
      insert_task_reference(references, task, "EVENT", dref)
      # Resource References
      dref = "/AUTOSAR/EcucDefs/Os/OsTask/OsTaskResourceRef"
      insert_task_reference(references, task, "RESOURCE", dref)

      # Sub-Containers
      if "AUTOSTART_APPMODE" in task:
         sub_ctnr = ET.SubElement(ctnr, "SUB-CONTAINERS")
         l2_ctnr = insert_container(sub_ctnr, "OsTaskAutostart", "/AUTOSAR/EcucDefs/Os/OsTask/OsTaskAutostart")
         # References
         l2_refs = ET.SubElement(l2_ctnr, "REFERENCE-VALUES")
         dref = "/AUTOSAR/EcucDefs/Os/OsTask/OsTaskAutostart/OsTaskAppModeRef"
         for am in task["AUTOSTART_APPMODE"]:
            insert_reference(l2_refs, dref, "/"+str(EcuName)+"/Os/"+str(am))



def build_ecuc_os_package(root, name):
   global EcuName

   arpkg = ET.SubElement(root, "AR-PACKAGE")
   shortname = ET.SubElement(arpkg, "SHORT-NAME")
   shortname.text = name
   EcuName = name
   elements = ET.SubElement(arpkg, "ELEMENTS")

   # Create the Os Module Configuration Element
   mod_conf = ET.SubElement(elements, "ECUC-MODULE-CONFIGURATION-VALUES")
   shortname = ET.SubElement(mod_conf, "SHORT-NAME")
   shortname.text = "Os"
   def_ref = ET.SubElement(mod_conf, "DEFINITION-REF", DEST="ECUC-MODULE-DEF")
   def_ref.text = "/AUTOSAR/EcucDefs/Os"
   ecu_def_edition = ET.SubElement(mod_conf, "ECUC-DEF-EDITION")
   ecu_def_edition.text = "4.2.0"
   impl_cfg_var = ET.SubElement(mod_conf, "IMPLEMENTATION-CONFIG-VARIANT")
   impl_cfg_var.text = "VARIANT-PRE-COMPILE"

   # Create CONTAINER element and export Os objects.
   containers = ET.SubElement(mod_conf, "CONTAINERS")
   export_appmodes_to_container(containers)
   export_osos_to_container(containers) # sg.OS_Cfgs go in here
   export_events_to_container(containers) # All events extracted from tasks go in here
   export_counters_to_container(containers)
   export_tasks_to_container(containers)



def export(path):
   if not os.path.exists(path):
      os.makedirs(path)
   outfile = path+"/output.arxml"
   
   root = ET.Element("AUTOSAR")
   root.set("xmlns", "http://autosar.org/schema/r4.0")
   root.set("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
   root.set("xsi:schemaLocation", "http://autosar.org/schema/r4.0 autosar.xsd")
   tree = ET.ElementTree(root)
   arpkgs = ET.SubElement(root, "AR-PACKAGES")
   build_ecuc_os_package(arpkgs, "ECUC_1")

   ET.indent(tree, space="\t", level=0)
   tree.write(outfile, encoding="utf-8", xml_declaration=True)
   finalize_arxml_doc(outfile)
   print("Exported to " + outfile)



if __name__ == '__main__':
   print("export.py::__main__")